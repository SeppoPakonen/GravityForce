-- INI-File fuer User-Gegner "Bigtower"

dofile("./levels/libhelp.sc")

-- Pics laden
BIGTOWER_BASE_LEFT   = images:load("./bigtower/base_l.tga")
BIGTOWER_BASE_RIGHT  = images:load("./bigtower/base_r.tga")
BIGTOWER_TOWER_LEFT  = images:load("./bigtower/tower_l.tga")
BIGTOWER_TOWER_RIGHT = images:load("./bigtower/tower_r.tga")
BIGTOWER_DOOR_LEFT   = images:load("./bigtower/door_l.tga")
BIGTOWER_DOOR_RIGHT  = images:load("./bigtower/door_r.tga")
BIGTOWER_REACTOR     = images:load("./bigtower/reactor.tga")

-- Einige globale Variablen definieren
if (not bt_xpos) then bt_xpos = 250 end
if (not bt_ypos) then bt_ypos = 430 end
if (not bt_start_nr) then bt_start_nr = 1000 end
if (not bt_door_killcount) then bt_door_killcount = 60 end
if (not bt_rocket_strength) then bt_rocket_strength = 7 end
if (not bt_rocket_turn) then bt_rocket_turn = 0.05 end
if (not bt_rocket_cycle) then bt_rocket_cycle = 1 end
if (not bt_hitpoints_bases) then bt_hitpoints_bases = 1000 end
if (not bt_hitpoints_towers) then bt_hitpoints_towers = 500 end
if (not bt_hitpoints_doors) then bt_hitpoints_doors = 30 end
if (not bt_hitpoints_flaks) then bt_hitpoints_flaks = 50 end

bt_base = {}
bt_tower = {}
bt_doors_left = {}
bt_doors_right = {}
bt_moving_doors = {}

bt_nr_reactor = bt_start_nr
bt_nr_base_1 = bt_start_nr+1
bt_nr_base_2 = bt_start_nr+2
bt_nr_tower_1 = bt_start_nr+3
bt_nr_tower_2 = bt_start_nr+4
bt_nr_door_left_1 = bt_start_nr+5
bt_nr_door_left_2 = bt_start_nr+6
bt_nr_door_left_3 = bt_start_nr+7
bt_nr_door_left_4 = bt_start_nr+8
bt_nr_door_left_5 = bt_start_nr+9
bt_nr_door_left_6 = bt_start_nr+10
bt_nr_door_left_7 = bt_start_nr+11
bt_nr_door_left_8 = bt_start_nr+12
bt_nr_door_left_9 = bt_start_nr+13
bt_nr_door_right_1 = bt_start_nr+14
bt_nr_door_right_2 = bt_start_nr+15
bt_nr_door_right_3 = bt_start_nr+16
bt_nr_door_right_4 = bt_start_nr+17
bt_nr_door_right_5 = bt_start_nr+18
bt_nr_door_right_6 = bt_start_nr+19
bt_nr_door_right_7 = bt_start_nr+20
bt_nr_door_right_8 = bt_start_nr+21
bt_nr_door_right_9 = bt_start_nr+22
bt_nr_flak_1 = bt_start_nr+23
bt_nr_flak_2 = bt_start_nr+24
bt_count = 25

-- Gegner aus Einzelstueckchen zusammensetzen
bt_base[1]  = enemies:add( bt_nr_base_1, E_USER, bt_xpos, bt_ypos-17, 0, BIGTOWER_BASE_LEFT, 0, 0, 0, 0 )
bt_reactor  = enemies:add( bt_nr_reactor, E_USER, bt_base[1]:get_x()+bt_base[1]:get_width(), bt_base[1]:get_y(), 0, BIGTOWER_REACTOR, 0, 0, 0, 0 )
bt_base[2]  = enemies:add( bt_nr_base_2, E_USER, bt_reactor:get_x()+bt_reactor:get_width(), bt_base[1]:get_y(), 0, BIGTOWER_BASE_RIGHT, 0, 0, 0, 0 )

for n = 1, 9 do
  local left_x = bt_base[1]:get_x()+bt_base[1]:get_width()-18
  local left_y = bt_base[1]:get_y()+11-183 + 10 + 17*(n-1)
  local right_x = bt_base[2]:get_x()-7
  local right_y = bt_base[2]:get_y()+11-183 + 10 + 17*(n-1)  
  local spd = 0.15
      
  bt_doors_left[n] = enemies:add( bt_nr_door_left_1+n-1, E_USER, 
                                  left_x-n, left_y,
                                  0, BIGTOWER_DOOR_LEFT, 0, 0, 0, 0 )
  bt_doors_right[n] = enemies:add( bt_nr_door_right_1+n-1, E_USER, 
                                  right_x+n, right_y,
                                  0, BIGTOWER_DOOR_RIGHT, 0, 0, 0, 0 )
                                  
  bt_doors_left[n].wp:add(left_x-9, left_y, spd)
  bt_doors_left[n].wp:add(left_x, left_y, spd)

  bt_doors_right[n].wp:add(right_x+9, right_y, spd) 
  bt_doors_right[n].wp:add(right_x, right_y, spd)
  
  -- herauszuschiessende Tueren initialisieren
  bt_moving_doors[n] = -1;
  bt_moving_doors[n+9] = -1;

  -- diese Tueren sollen nicht herausschiessen (zu nah am Boden)
  bt_moving_doors[8] = 0
  bt_moving_doors[9] = 0
  bt_moving_doors[17] = 0
  bt_moving_doors[18] = 0
end

bt_tower[1] = enemies:add( bt_nr_tower_1, E_USER, bt_base[1]:get_x()+bt_base[1]:get_width()-19, bt_base[1]:get_y()-183+11, 0, BIGTOWER_TOWER_LEFT, 0, 0, 0, 0 )
bt_tower[2] = enemies:add( bt_nr_tower_2, E_USER, bt_base[2]:get_x(), bt_base[2]:get_y()-183+11, 0, BIGTOWER_TOWER_RIGHT, 0, 0, 0, 0 )

-- Und die Flaks obenauf
bt_flak1 = enemies:add( bt_nr_flak_1, E_TOWER_FLAK, bt_tower[1]:get_x()+4, bt_tower[1]:get_y()-5, 0, 60, 60, 800, 3, 2 )
bt_flak2 = enemies:add( bt_nr_flak_2, E_TOWER_FLAK, bt_tower[2]:get_x()+4, bt_tower[2]:get_y()-5, 0, 60, 60, 800, 3, 2 )
bt_flak1:set_maxhit(bt_hitpoints_flaks)
bt_flak2:set_maxhit(bt_hitpoints_flaks)
bt_flak1:set_xradius(100)
bt_flak1:set_yradius(400)
bt_flak2:set_xradius(100)
bt_flak2:set_yradius(400)


-- Erstmal alle Hook-Funktionen fuer alle Gegner ausschalten
globals.do_all_hooks = 0

-- Gegnerparameter einstellen (Hitpoints usw.)
for n = 1, 2 do
  bt_tower[n]:set_maxhit(bt_hitpoints_towers)
  bt_base[n]:set_maxhit(bt_hitpoints_bases)
  bt_tower[n]:set_do_hooks(1)
  bt_base[n]:set_do_hooks(1)
end

for n = 1, 9 do
  bt_doors_left[n]:set_maxhit(bt_hitpoints_doors)
  bt_doors_right[n]:set_maxhit(bt_hitpoints_doors)
  bt_doors_left[n]:set_do_hooks(1)
  bt_doors_right[n]:set_do_hooks(1)
end

bt_reactor:set_maxhit(50)
bt_reactor:set_do_hooks(1)



-- HOOK-Funktionen (anderer Name, werden im Levelfile dann in der 
-- Hook-Funktion aufgerufen)

-- Die richtigen Pixel sollen erscheinen, wenn Gegner getroffen wird
-- Reaktor soll "verwundbare Stelle" haben, die man mit Bigbomb treffen kann

function hook_bigtower_enemy_hit( en, weap, hitp, sx, sy )
  local en_nr = en:get_nr()

  -- Pixel und Mini-Explosionen beim Treffen "unseres" Gegners  
  if (en_nr >= bt_start_nr and en_nr <= bt_start_nr+bt_count) then
    effects.explosions:add(EXP_SMALL_2, 3, 0, sx, sy)
    effects.pixels:add(10, sx, sy, 0, 0, 
                       -en:get_hitby_sx()/4, en:get_hitby_sy()/4,
                       50, PIX_WHITE, 10, 180, 30)
                       
    en:set_hit(en:get_hit()+hitp)
    gsound:play_sound(SOUND_SHIP_HIT)
    en:set_dont_continue(1)
  end

  -- Wenn die Tueren fast zerstoert sind, das Rauszischen aktivieren
  if (en_nr >= bt_nr_door_left_1 and en_nr <= bt_nr_door_right_9) then
    if (en:get_hit() >= en:get_maxhit() and
        bt_moving_doors[en_nr-bt_nr_door_left_1+1] == -1) then
      en:set_hit(en:get_maxhit()-5)
      bt_moving_doors[en_nr-bt_nr_door_left_1+1] = bt_door_killcount
    end
  end 
  
  -- Reaktor richtig getroffen? Weg mit dem Ding!
  if (en_nr == bt_nr_reactor and weap == W_BIGBOMB) then
    if (sy < en:get_y()+5) then
      en:set_hit(en:get_maxhit()+1)
    end
  end
end


-- Reaktor soll in best. Zyklen Raketen auf die Spieler abfeuern
-- Bewegliche Teile sollen herausschiessen, wenn fast zerstoert
function hook_bigtower_enemy_update( en )
  local en_nr = en:get_nr()
  
  if (en_nr == bt_nr_reactor) then
    if (mod(globals.game_time, 120*bt_rocket_cycle) == 75) then
      local pl
      for pl = 1, globals.players do
        local myrocket = effects.bullets:add(W_ROCKET, 0, en:get_nr(), 
                                             en:get_x()+en:get_width()/2-2, en:get_y()+5,
                                             0, 1.3,
                                             bt_rocket_strength, bt_rocket_strength, bt_rocket_strength,
                                             bt_rocket_turn, 0)
        -- Rakete soll erst nach 2.5 Sekunden ein Ziel aufschalten
        myrocket:set_user(60*2.5)
        -- Rakete soll bestimmten Spieler aufschalten
        myrocket:set_target(player[pl]:get_sig())
        -- Sound abspielen
        gsound:play_sound(SOUND_SHOOT_ROCKET, en:get_x(), en:get_y())
      end
    end
  end
  
  -- Bewegliche Teile herausschiessen lassen
  en_nr = en:get_nr()-bt_nr_door_left_1 + 1
  
  if (en_nr >= 1 and en_nr <= 18 and 
      bt_moving_doors[en_nr] > 0) then
      
      if (bt_moving_doors[en_nr] == bt_door_killcount) then
        en.wp:remove_all()
        if (en_nr < 10) then
          en:set_xspd(-2)
        else
          en:set_xspd(2)
        end
        bt_moving_doors[en_nr] = bt_door_killcount - 1
        gsound:play_sound(SOUND_SHOOT_FREEZER, en:get_x(), en:get_y())
      else
        en:set_yspd(en:get_yspd() + globals.level_gravity*2*globals.gravity_percent)
        effects.explosions:add(EXP_MED_1, 3, 0, en:get_x()+math.random(en:get_width()), en:get_y()+math.random(en:get_height()))
        bt_moving_doors[en_nr] = bt_moving_doors[en_nr] - 1
        if (bt_moving_doors[en_nr] == 0) then
          en:set_hit(en:get_maxhit()+1)
        end
      end
  end
end


-- Der Gegner soll korrekt explodieren und evtl. "untergeordnete" Gegner
-- zerstoeren
function hook_bigtower_enemy_dead( en )
  local en_nr = en:get_nr()
  local en_x = en:get_x()
  local en_y = en:get_y()
  local en_w = en:get_width()
  local en_h = en:get_height()
  
  -- linker Turm: Tueren rausjagen, Flak zerstoeren
  if (en_nr == bt_nr_tower_1) then
    local n
    for n = 1, 9 do 
      local mydoor = enemies:get_enemy( bt_nr_door_left_1 + n - 1 )
      if (mydoor) then
        bt_moving_doors[n] = bt_door_killcount
      end
    end
    local myflak = enemies:get_enemy( bt_nr_flak_1 )
    if (myflak) then myflak:set_hit(myflak:get_maxhit()+1) end
  end
  
  -- rechter Turm: Tueren rausjagen, ...
  if (en_nr == bt_nr_tower_2) then
    local n
    for n = 1, 9 do 
      local mydoor = enemies:get_enemy( bt_nr_door_right_1 + n - 1 )
      if (mydoor) then
        bt_moving_doors[n+9] = bt_door_killcount
      end
    end
    local myflak = enemies:get_enemy( bt_nr_flak_1 )
    if (myflak) then myflak:set_hit(myflak:get_maxhit()+1) end
  end

  -- Parameter fuer alle "unsere" Gegner
  if (en_nr >= bt_start_nr and en_nr <= bt_start_nr+bt_count) then
    en:set_dont_continue(1)
  end
    
  -- verschiedene Explosionen fuer versch. Gegnerteile
  -- Tueren
  if (en_nr >= bt_nr_door_left_1 and en_nr <= bt_nr_door_right_9) then
    local n
    for n = 0, 5 do
      effects.explosions:add(EXP_SMALL_2+math.random(2), 4, math.random(10), en_x+math.random(en_w), en_y+math.random(en_h))
      effects.pixels:add(40, en_x+math.random(en_w), en_y+math.random(en_h), 10, 10,
                         1-math.random(2), 1-math.random(2),
                         10, PIX_WHITE, 10, 60*4, 30)
      effects.pixels:add(5, en_x+math.random(en_w), en_y+math.random(en_h), 10, 10,
                         2-math.random(4), 2-math.random(4),
                         10, PIX_DEBRIS3)
    end
    gsound:play_sound(SOUND_EXPL_MEDIUM1, en_x, en_y)
  end

  -- Tuerme
  if (en_nr == bt_nr_tower_1 or en_nr == bt_nr_tower_2) then
    local n
    for n = 0, 10 do
      effects.explosions:add(EXP_BIG_1, 5, 4*n, en_x+5+math.random(10), en_y+(10-n)*18)
      effects.pixels:add(80, en_x+math.random(en_w), en_y+math.random(en_h), 10, 10,
                         math.random(2)-1, math.random(2)-1,
                         50, PIX_WHITE, 10, 60*4, 30)
      effects.pixels:add(8, en_x+math.random(en_w), en_y+math.random(en_h), 10, 10,
                         1-math.random(2), 1-math.random(2),
                         40, PIX_DEBRIS3)
      effects.pixels:add(5, en_x+math.random(en_w), en_y+math.random(en_h), 10, 10,
                         1-math.random(2), 1-math.random(2),
                         30, PIX_DEBRIS4)
    end
    gsound:play_sound(SOUND_EXPL_BIG1, en_x, en_y)
  end

  -- Basis links/rechts
  if (en_nr == bt_nr_base_1 or en_nr == bt_nr_base_2) then
    local n
    for n = 0, 5 do
      effects.explosions:add(EXP_BIG_1, 5, math.random(20), en_x+math.random(en_w), en_y+math.random(en_h))
      effects.pixels:add(60, en_x+math.random(en_w), en_y+math.random(en_h), 10, 10,
                         math.random(2)-1, math.random(2)-1,
                         50, PIX_WHITE, 10, 60*4, 30)
      effects.pixels:add(8, en_x+math.random(en_w), en_y+math.random(en_h), 10, 10,
                         1-math.random(2), 1-math.random(2),
                         40, PIX_DEBRIS3)
    end

    gsound:play_sound(SOUND_EXPL_BIG1, en_x, en_y)
        
    -- jeweiligen Turm killen
    if (en_nr == bt_nr_base_1) then 
      local myturm = enemies:get_enemy(bt_nr_tower_1)
      if (myturm) then myturm:set_hit(myturm:get_maxhit()+1) end
    elseif (en_nr == bt_nr_base_2) then 
      local myturm = enemies:get_enemy(bt_nr_tower_2)
      if (myturm) then myturm:set_hit(myturm:get_maxhit()+1) end
    end
  end

  -- Reaktor
  if (en_nr == bt_nr_reactor) then
    local n
    effects.explosions:add(EXP_BIG_2, 5, 0, en_x-15, en_y-15)
    for n = 0, 5 do
      effects.explosions:add(EXP_BIG_1, 5, math.random(60), en_x+math.random(en_w), en_y+math.random(en_h))
      effects.pixels:add(150, en_x+math.random(en_w), en_y+math.random(en_h), 10, 10,
                         math.random(4)-2, math.random(4)-2,
                         10, PIX_WHITE, 10, 60*4, 30)
      effects.pixels:add(10, en_x+math.random(en_w), en_y+math.random(en_h), 10, 10,
                         1-math.random(2), 1-math.random(2),
                         20, PIX_DEBRIS3)
      effects.pixels:add(5, en_x+math.random(en_w), en_y+math.random(en_h), 10, 10,
                         2-math.random(4), 2-math.random(4),
                         40, PIX_DEBRIS1)
    end

    gsound:play_sound(SOUND_EXPL_BIG1, en_x, en_y)
        
    -- alles, was sonst noch existiert, wegkillen
    for n = bt_start_nr, bt_start_nr+bt_count do
      if (n ~= bt_nr_reactor) then
        if (n >= bt_nr_door_left_1 and n <= bt_nr_door_right_9) then
          bt_moving_doors[bt_nr_door_left_1+18-n] = bt_door_killcount
        else
          local mypart = enemies:get_enemy(n)
          if (mypart) then mypart:set_hit(mypart:get_maxhit()+1) end
        end
      end
    end
  end
end
